# =====================
# AMCL
# =====================
amcl:
  ros__parameters:
    use_sim_time: False
    odom_frame_id: "odom"
    base_frame_id: "base_footprint"
    scan_topic: "/scan_merged"
    min_particles: 1000
    max_particles: 8000
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    robot_model_type: "nav2_amcl::OmniMotionModel"  # o "DifferentialMotionModel" si es un base diff
    laser_model_type: "likelihood_field_prob"
    do_beamskip: True
    beam_skip_distance: 0.5
    laser_max_range: 100.0
    laser_min_range: -1.0
    update_min_d: 0.2
    update_min_a: 0.2
    resample_interval: 1
    transform_tolerance: 0.05
    recovery_alpha_slow: 0.001
    recovery_alpha_fast: 0.1
    initial_pose_x: 0.0
    initial_pose_y: 0.0
    initial_pose_a: 0.0
    initial_cov_xx: 0.25
    initial_cov_yy: 0.25
    initial_cov_aa: 0.06853

# =====================
# BT NAVIGATOR
# =====================
bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom
    bt_loop_duration: 5
    default_server_timeout: 10
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667

    default_nav_to_pose_bt_xml: "/home/mapir/sancho_ws/src/sancho_navigation/bt/navigate_to_pose_custom.xml"


    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

# =====================
# CONTROLLER SERVER (local)
# =====================
controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.05
    min_y_velocity_threshold: 0.05
    min_theta_velocity_threshold: 0.05
    failure_tolerance: 0.3

    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]  # o "precise_goal_checker"
    smoother_plugins: ["velocity_smoother"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.2
      movement_time_allowance: 20.0

    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.2
      yaw_goal_tolerance: 0.5   # Mayor tolerancia para evitar microajustes

    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.4

      vx_max: 0.4 # velocidad máxima
      vx_min: 0.0

      vy_max: 0.0
      vy_min: -0.0

      wz_max: 1.0

      ax_max: 0.5
      ax_min: -0.5

      az_max: 1.0
      
      iteration_count: 1 
      prune_distance: 1.7
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "Ackermann"
      visualize: false

      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3

      AckermannConstraints:
        min_turning_r: 0.4764

      # Críticos integrados para evaluaciones de trayectorias
      critics: 
         - "ConstraintCritic"
         - "CostCritic"
         - "GoalCritic"
         - "GoalAngleCritic"
         - "PathAlignCritic"
         - "PathFollowCritic"
         - "PathAngleCritic"
         - "PreferForwardCritic"
        # - "VelocityDeadbandCritic"  # Opcional, para suavizar cambios muy pequeños

      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0

      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.4

      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.5

      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.5

      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.81
        critical_cost: 300.0
        consider_footprint: true
        collision_cost: 1000000.0
        near_goal_distance: 1.0
        trajectory_point_step: 2

      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 4
        threshold_to_consider: 0.5
        offset_from_furthest: 20
        use_path_orientations: false

      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 1.4

      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.5
        max_angle_to_furthest: 1.0
        forward_preference: true

      # Opcionales: Activa estos críticos si observas comportamientos indeseados.
      VelocityDeadbandCritic:
        enabled: true
        cost_power: 1
        cost_weight: 30.0
        deadband_velocities: [0.02, 0.02, 0.02]

      TwirlingCritic:
        enabled: true
        twirling_cost_power: 1
        twirling_cost_weight: 8.0

    velocity_smoother:
      plugin: "nav2_velocity_smoother::VelocitySmoother"
      smoothing_frequency: 20.0
      scale_velocities: false
      feedback: "OPEN_LOOP"  # "OPEN_LOOP" o "CLOSED_LOOP", OPEN_LOOP es más común
      max_velocity: [0.4, 0.0, 1.0]      # [linear_x, linear_y, angular_z]
      min_velocity: [0.05, 0.0, 0.05]
      max_accel: [0.5, 0.0, 1.0]         # ajustado a tu config actual
      max_decel: [-0.5, 0.0, -1.0]       # frenada controlada
      deadband_velocity: [0.02, 0.0, 0.02]  # zona muerta para evitar vibraciones
      velocity_timeout: 1.0

    plugin_lib_names:
      - "nav2_mppi_controller"

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

# =====================
# PLANNER SERVER (global)
# =====================
# ===============================================================
# Configuración SmacPlannerHybrid
# Explicación de cada parámetro
# ===============================================================

# plugin: Tipo de planificador usado, aquí el Smac Híbrido (ideal para robots Ackermann/diferenciales).
# tolerance: Permite llegar a cierta distancia del objetivo (metros).
# downsample_costmap: Si se reduce la resolución del costmap (false = máxima precisión).
# downsampling_factor: Factor de reducción del costmap si downsample_costmap es true.
# allow_unknown: Permite planear a través de zonas desconocidas en el mapa (false = no permitido).
# max_iterations: Máximo número de expansiones de nodos antes de abortar.
# max_on_approach_iterations: Número máximo de expansiones cerca del objetivo.
# terminal_checking_interval: Cada cuántas expansiones comprobar si estamos en la meta.
# max_planning_time: Tiempo máximo permitido para generar un plan (segundos).
# motion_model_for_search: Modelo de movimiento (DUBIN = sin marcha atrás, REEDS_SHEPP = con marcha atrás).
# cost_travel_multiplier: Penalización por viajar sobre zonas de coste (zonas cercanas a obstáculos).
# cost_penalty: Penaliza pasar por celdas cercanas a obstáculos (costmap).
# angle_quantization_bins: Número de ángulos discretos (menos = más rápido, menos preciso).
# analytic_expansion_ratio: Ratio de distancia para intentar atajos analíticos hacia el objetivo.
# analytic_expansion_max_length: Longitud máxima de un atajo analítico (metros).
# analytic_expansion_max_cost: Coste máximo aceptable para usar un atajo analítico.
# analytic_expansion_max_cost_override: Permitir atajos aunque superen el coste máximo (false = no permitir).
# minimum_turning_radius: Radio mínimo de giro del robot (metros).
# reverse_penalty: Penaliza la marcha atrás para favorecer la marcha adelante.
# change_penalty: Penaliza cambiar de dirección (de avanzar a retroceder y viceversa).
# non_straight_penalty: Penaliza trayectorias curvas para favorecer movimientos rectos.
# retrospective_penalty: Penalización mínima para pasos hacia atrás en el grafo.
# rotation_penalty: Penaliza las rotaciones in situ (giros en el sitio).
# lookup_table_size: Tamaño de la tabla de búsqueda para curvas (metros).
# cache_obstacle_heuristic: Habilita cacheo de heurística de obstáculos para acelerar el planning.
# allow_reverse_expansion: Permite o no la expansión de nodos marcha atrás (false = no permitir).
# smooth_path: Suaviza el camino final planeado para hacerlo más continuo.
# debug_visualizations: Publica información de debug en RViz (false para menos consumo de CPU).

# Smoother:
# max_iterations: Número máximo de iteraciones del suavizador.
# w_smooth: Peso del suavizado de la trayectoria (más alto = caminos más suaves).
# w_data: Peso para mantener el camino cerca del plan original.
# tolerance: Tolerancia para la convergencia del suavizado.
# do_refinement: Refinar aún más el camino después del suavizado (false para mayor velocidad).
# ===============================================================
planner_server:
  ros__parameters:
    use_sim_time: False
    expected_planner_frequency: 20.0
    planner_plugins: ["SmacHybridPlanner"]
    SmacHybridPlanner:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      tolerance: 0.5
      downsample_costmap: false
      downsampling_factor: 1
      allow_unknown: false
      max_iterations: 1000000
      max_on_approach_iterations: 1000
      terminal_checking_interval: 5000
      max_planning_time: 5.0
      motion_model_for_search: "DUBIN"  # o "REEDS_SHEPP" si quieres marcha atrás
      cost_travel_multiplier: 2.0
      cost_penalty: 2.0
      angle_quantization_bins: 36
      analytic_expansion_ratio: 2.5
      analytic_expansion_max_length: 2.0
      analytic_expansion_max_cost: 200
      analytic_expansion_max_cost_override: false
      minimum_turning_radius: 0.40
      reverse_penalty: 2.1
      change_penalty: 1.0
      non_straight_penalty: 1.5
      retrospective_penalty: 0.025
      rotation_penalty: 7.0
      lookup_table_size: 20.0
      cache_obstacle_heuristic: true
      allow_reverse_expansion: false
      smooth_path: true
      debug_visualizations: false

      smoother:
        smoother_plugin: "nav2_smac_planner/ConjugateGradientSmoother"
        tolerance: 1e-10
        max_iterations: 100
        w_smooth: 0.3
        w_curvature: 0.1
        w_distance: 0.2

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

# =====================
# MAP SERVER
# =====================
map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "/home/mapir/sancho_ws/src/sancho_navigation/maps/map.yaml"

# =====================
# GLOBAL COSTMAP
# =====================
global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: False        # Robot real
      global_frame: "map"        # Typically 'map'
      track_unknown_space: false
      robot_base_frame: "base_footprint"
      resolution: 0.025
      downsample_costmap: false

      footprint_padding: 0.03
      transform_tolerance: 0.2

      # Frecuencias típicas
      update_frequency: 1.0
      publish_frequency: 1.0

      # Radio del robot (o footprint)
      footprint: "[[-0.375, -0.275], [-0.375, 0.275], [0.375, 0.275], [0.375, -0.275]]"


      # Lista de capas
      plugins:
        - "static_layer"
        - "obstacle_layer"
        - "inflation_layer"

      # Static layer
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: true
        map_subscribe_transient_local: true
        subscribe_to_updates: false
        transform_tolerance: 0.2

      # Obstacle layer
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        footprint_clearing_enabled: true
        max_obstacle_height: 2.0
        combination_method: 1
        observation_sources: "laser_front laser_back"

        laser_front:
          topic: "/scan_1st"
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          observation_persistence: 0.5  

        laser_back:
          topic: "/scan_2nd"
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          observation_persistence: 0.5
        
        # camera_depth:
        #   topic: "/scan_camera"
        #   max_obstacle_height: 2.0
        #   clearing: True
        #   marking: True
        #   observation_persistence: 0.5

      # Inflation layer
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.7       # Mucho mayor que el radio inscrito (~0.275 m)
        cost_scaling_factor: 1.5    # Coste decrece de forma gradual
        inflate_unknown: true
        inflate_around_unknown: true


      # Costmap completo
      always_send_full_costmap: True

# =====================
# LOCAL COSTMAP
# =====================
local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: False          # Robot real
      global_frame: "odom"         # Típico para local costmap
      robot_base_frame: "base_footprint"
      resolution: 0.05
      transform_tolerance: 0.2

      rolling_window: true
      width: 5
      height: 5

      # Frecuencias del local costmap
      update_frequency: 20.0
      publish_frequency: 10.0

      footprint: "[[-0.375, -0.275], [-0.375, 0.275], [0.375, 0.275], [0.375, -0.275]]"
      footprint_padding: 0.03

      plugins:
        - "voxel_layer"
        - "obstacle_layer"
        - "inflation_layer"
        # - "social_layer"

      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: true
        voxel_decay: 0.5         # Obstáculos desaparecen rápido
        decay_model: 0           # 0: Tiempo fijo
        voxel_size: 0.05
        z_voxels: 10
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: "camera_depth"
        publish_voxel_map: true
        camera_depth:
          topic: "/astra_camera/camera/depth/points"
          data_type: "PointCloud2"
          marking: true
          clearing: true
          obstacle_range: 5.0
          raytrace_range: 5.5
          min_obstacle_height: 0.1
          max_obstacle_height: 1.8


      # Obstacle layer local
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        footprint_clearing_enabled: true
        max_obstacle_height: 2.0
        combination_method: 1
        observation_sources: "laser_front laser_back camera_depth"
        observation_persistence: 0.2
        obstacle_range: 5.0
        raytrace_range: 5.5

        laser_front:
          topic: "/scan_1st"
          max_obstacle_height: 2.0
          clearing: True
          marking: True
        laser_back:
          topic: "/scan_2nd"
          max_obstacle_height: 2.0
          clearing: True
          marking: True
        camera_depth:
          topic: "/scan_camera"
          clearing: True
          marking: True
          min_obstacle_height: 0.1
          max_obstacle_height: 1.8

      # Inflation layer local
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.4       # Mucho mayor que el radio inscrito (~0.275 m)
        cost_scaling_factor: 2.0    # Coste decrece de forma gradual
        inflate_unknown: true
        inflate_around_unknown: true


      # Proxemics layer local
      # proxemics_layer:
      #   plugin: "proxemics_costmap_layer::ProxemicsLayer"
      #   enabled: true
      #   ellipse_a: 0.5
      #   ellipse_b: 0.3
      #   obstacle_cost: 254
      #   person_topic: "/human_pose/persons_poses"
      #   transform_tolerance: 0.1
      
      social_layer:
        plugin: "nav2_social_costmap_plugin::SocialLayer"
        people_topic: "/people"
        enabled: True
        cutoff: 10.0
        amplitude: 255.0
        publish_occgrid: True
        use_passing: True
        use_vel_factor: True
        speed_factor_multiplier: 5.0
        covariance_front_height: 0.4
        covariance_front_width: 0.25
        covariance_rear_height: 0.25
        covariance_rear_width: 0.25
        covariance_right_height: 0.3
        covariance_right_width: 0.2
        covariance_when_still: 0.25
# =====================
# BEHAVIOR SERVER
# =====================
behavior_server:
  ros__parameters:
    use_sim_time: False
    costmap_topic: "local_costmap/costmap_raw"
    footprint_topic: "local_costmap/published_footprint"
    cycle_frequency: 20.0
    behavior_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    wait:
      plugin: "nav2_behaviors/Wait"
    global_frame: "odom"
    robot_base_frame: "base_footprint"
    transform_timeout: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.5    # Reducido para giros más controlados
    min_rotational_vel: 0.3    # Incrementado para evitar giros demasiado lentos
    rotational_acc_lim: 1.0    # Menor aceleración en rotación para suavizar el giro

# Velocity Smoother Plugin
velocity_smoother:
  ros__parameters:
    use_sim_time: False
    smoothing_frequency: 20.0
    max_velocity: [0.35, 0.0, 0.5]
    deadband: [0.0, 0.0, 0.15]  # El angular deadband evita micro giros inferiores a 0.1 rad/s
    max_accel: [0.5, 0.0, 1.0]
    max_decel: [-0.5, 0.0, -1.0]
    feedback: "OPEN_LOOP"


# Collision Monitor Plugin
collision_monitor:
  ros__parameters:
    use_sim_time: False
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_raw"
    cmd_vel_out_topic: "cmd_vel"
    transform_tolerance: 0.1
    source_timeout: 2.0
    stop_pub_timeout: 0.5
    base_shift_correction: true
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint: "[[-0.375, -0.275], [-0.375, 0.275], [0.375, 0.275], [0.375, -0.275]]"
      time_before_collision: 1.0
      simulation_time_step: 0.1
      max_points: 1
      visualize: true
        
    observation_sources: ["scan_front", "scan_back", "camera_depth"]
    scan_front:
      type: "scan"
      topic: "/scan_1st"
      min_height: 0.0
      max_height: 2.0

    scan_back:
      type: "scan"
      topic: "/scan_2nd"
      min_height: 0.0
      max_height: 2.0

    camera_depth:
      type: "scan"
      topic: "/scan_camera"
      min_height: 0.0
      max_height: 2.0
